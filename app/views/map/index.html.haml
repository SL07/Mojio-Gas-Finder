:javascript
  var App, MojioClient, config, mojio_client, Current_marker; //some variables needed to initialize data 
  var isLoggedIn = false;
  Current_marker = null;
  var count;

  config = {
            application: '434f01ce-504b-4f72-a919-5a81dee7d506', // Fill in your app id here!
            redirect_uri: 'https://mojio.herokuapp.com/map', // Fill in you redirect uri here! (Ex. 'http://localhost:4093/index.html')
            hostname: 'api.moj.io',
            version: 'v1',
            port: '443',
            scheme: 'https',
            live: false // This will connect your app to the sandbox environment, change it to true to go live. 
        };
        mojio_client = new MojioClient(config);
       
    if (localStorage["mojio_token"] == null){
       console.log("localStorge not made yet, need to login");   
    }
    else{
    console.log("value of token is: " + localStorage["mojio_token"]);
    mojio_client.auth_token = JSON.parse(localStorage["mojio_token"]); //need to destring before passing in
    } 

  if (mojio_client.isLoggedIn() == false){  //use this to test for login status
      console.log("checking for login token");
              mojio_client.token(function(error, result) {
                  if (error) {
                      console.log(error);
                     // alert("Authorize Redirect, token could not be retreived:" + error); //take out later 
                  } else {
                    //  alert("Authorization Successful.");   //taken out for video demo
                      div = $("#welcome");
                      div.html('Authorization Result:');
                      div.append(JSON.stringify(result));
                      console.log(JSON.stringify(result));
                      localStorage["mojio_token"] = JSON.stringify(result);  //save the token into local storage

                  }
              });
  }
  else if(mojio_client.isLoggedIn() == true){
     console.log("already logged in to Mojio");
  }
  

  /////////////////////////////////////////////////

  function initialize() {
    var latlng = new google.maps.LatLng(49.25, -123.100);
      var mapOptions = {
        zoom: 12,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
    var map = new google.maps.Map(document.getElementById("map"), mapOptions);
    console.log("Latitude of car is: "+ localStorage["latitude"]);
    console.log("Latitude of car is: "+ localStorage["longitude"]);
    var Carlatlng = new google.maps.LatLng(localStorage["latitude"],localStorage["longitude"]);
    console.log("adding current location marker");
    var marker = new google.maps.Marker({
      position: Carlatlng,
      map: map,
      title: 'Current Location'
    });
    console.log("finished adding current location marker");
  }

  function autoUpdate() {

    getVehicleData();  //updates the value of localStorage["latitude"], localStorage["longitude"]
    var newPoint = new google.maps.LatLng(localStorage["latitude"], localStorage["longitude"]);
    var latlng = new google.maps.LatLng(49.25, -123.100);  //vancouver location 
    /* old code
    var newPoint = new google.maps.LatLng(localStorage["latitude"], localStorage["longitude"]);
    var latlng = new google.maps.LatLng(49.25, -123.100);
    */
    var mapOptions = {
      zoom: 12,
      center: newPoint,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };

    var map =  google.maps.Map(document.getElementById("map"), mapOptions);

    if (Current_marker != null ) {
      // Marker already created - Move it
      Current_marker.setPosition(newPoint);  //somehow marker disappear on 2nd autoUpdate call???????????
      console.log("current marker updated");
    }
    else {
      // Marker does not exist - Create it
      console.log("creating first location marker");
      Current_marker = new google.maps.Marker({
        position: newPoint,
        map: map,
        title: 'Current Location'
      });
    }

    // Center the map on the new position
   // map.setCenter(newPoint);
    // Call the autoUpdate() function every 1 seconds
    //console.log("timer has expired, runnning autoupdate")  
    //setTimeout(autoUpdate, 1000); //want to change this to setInterval 
    console.log("END of autoUpdate");
  }


  function getVehicleData(){   //move this function to map page later  
    return mojio_client.get(mojio_client.model("Vehicle"), {}, function(error, result) {
        var i, lat, lng;
        lat = [];  //can pass these values directly to Google maps
        lng = [];
        i =0;
        $.each(result.Data, function(key, value) {
            if ((value.LastLocation != null) && (value.LastLocation.Lat != null) && (value.LastLocation.Lng != null)) {
                lat[i]= value.LastLocation.Lat;
                lng[i]= value.LastLocation.Lng;
                localStorage["latitude"] = value.LastLocation.Lat; //store long and lat into local storage
                localStorage["longitude"] = value.LastLocation.Lng;
                return i++;

            }


        });
        console.log("location of vehicle is: LAT:"+ localStorage["latitude"]+" " + "LONG:" +localStorage["longitude"]);
    //    console.log("location of vehicle is: LAT:"+ lat[1]+" " + "LONG:" +lng[1]);
    });

  }

  function timeoutTest () {
    console.log("GOT INTO timeoutTest");
    setTimeout(timeoutTest, 1500); //rerun every 1.5 seconds
  }

 
  var myVar = setInterval(function () {myTimer()}, 3000); //enable this to call repeating function(ie: AutoUpdate() function)  

  function myTimer() {
    //var d = new Date();
    //document.getElementById("demo").innerHTML = d.toLocaleTimeString();
    console.log("inside timer function");
    autoUpdate();
  }



  google.maps.event.addDomListener(window, "load", initialize);
  //autoUpdate();



  
.container-fluid
  %h1 Map
  #map
  %p Vehicle Location: 

  
  #accordion.panel-group{"aria-multiselectable" => "true", :role => "tablist"}
  .panel.panel-default.col-md-3
    #headingOne.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapseOne", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapseOne"}
          Find Closest Station
    #collapseOne.panel-collapse.collapse{"aria-labelledby" => "headingOne", :role => "tabpanel"}
      .panel-body
        Preference:
        .dropdown
          %button#dLabel{"aria-expanded" => "false", "aria-haspopup" => "true", "data-toggle" => "dropdown", :type => "button"}
            Fuel Brand
            %span.caret
          %ul.dropdown-menu{"aria-labelledby" => "dLabel", :role => "menu"}
            %li
              %a{:href => "#"} Esso
            %li
              %a{:href => "#"} Petro Canada
        
  .panel.panel-default.col-md-3.col-md-offset-1
    #headingTwo.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapseTwo", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapseTwo"}
          Find Cheapest Station
    #collapseTwo.panel-collapse.collapse{"aria-labelledby" => "headingTwo", :role => "tabpanel"}
      .panel-body
        %h4 Preference:
        .dropdown
          %button#dLabel{"aria-expanded" => "false", "aria-haspopup" => "true", "data-toggle" => "dropdown", :type => "button"}
            Fuel Grade
            %span.caret
          %ul.dropdown-menu{"aria-labelledby" => "dLabel", :role => "menu"}
            %li
              %a{:href => "#"} Regular
            %li
              %a{:href => "#"} Mid Grade
            %li
              %a{:href => "#"} Premium
            %li
              %a{:href => "#"} Diesel
        %br/      
        %form
          Search Range:
          %input{:name => "range", :type => "number"}/
          km
        %br/  
        .btn-group{"aria-label" => "...", :role => "group"}
          %button.btn.btn-default{:type => "button"} Search
        
  .panel.panel-default.col-md-3.col-md-offset-1
    #headingThree.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapseThree", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapseThree"}
          Route
    #collapseThree.panel-collapse.collapse{"aria-labelledby" => "headingThree", :role => "tabpanel"}
      .panel-body
        Third