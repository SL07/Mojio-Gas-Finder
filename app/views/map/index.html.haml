:javascript

  $(document).ready(function(){
      if(isLoggedIn == false)
        if (sessionStorage["mojio_token"] ==  null)
          mojioAuthentication();
        else{  //session token isnt null, returning to page
          var temp_token = sessionStorage["mojio_token"];
          //console.log("temp token is: "+ temp_token);
          mojio_client.auth_token = JSON.parse(temp_token); //load in token if return to map page 
          isLoggedIn = mojio_client.isLoggedIn();
          //console.log("new login status is from isloggedin = "+isLoggedIn);
          changeLogoutIcon();
        } 
  });  
  
  var Current_marker = null;
  var count;
  var testLat = 49.25; 
  var testLong = -123.1;

  //var gasStationMarker;

  localStorage["correctFuelLevel"] = 65;  //random number to initialize, will be over written 

  var gasStationAddress= "7282 Knight St, Vancouver";
  var geocoder;
  var map;
  var directionsDisplay;
  var directionsService = new google.maps.DirectionsService();
  
  var lowFuelWarningdisplayed = false;

  var stationMarker;
  var infowindow;
  var firstLoad = true;
       
  function mojioAuthentication(){
    var mojio_token;
    if (mojio_client.isLoggedIn() == false){  //use this to test for login status
      console.log("checking for login token");
      mojio_client.token(function(error, result) {
        if (error) {
          console.log(error);
          $('#loginError').modal({
            keyboard: false,
            backdrop: 'static',
            show: true
          });             
        } else {          
          div = $("#welcome");
          div.html('Authorization Result:');
          div.append(JSON.stringify(result));
          //console.log(JSON.stringify(result));
          mojio_token = JSON.stringify(result);
          sessionStorage["mojio_token"] = JSON.stringify(result);  //save the token into local storage
        }
        mojio_client.auth_token = JSON.parse(mojio_token); //need to destring before passing in
        isLoggedIn = mojio_client.isLoggedIn();
        changeLogoutIcon();
        getVehicleData(); //update all long, lat and fuel level data on first load
        console.log("isLoggedIn= " + isLoggedIn + " Token " + mojio_token);
      });            
    }
    else if(mojio_client.isLoggedIn() == true){
      //console.log("already logged in to Mojio");
      //console.log("value of token is: " + sessionStorage["mojio_token"]);
    }
  }  

  function initialize() {
    geocoder = new google.maps.Geocoder();
    directionsDisplay = new google.maps.DirectionsRenderer();
    var latlng = new google.maps.LatLng(49.25, -123.100);
      var mapOptions = {
        zoom: 12,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
    map = new google.maps.Map(document.getElementById("map"), mapOptions);
    console.log("Latitude of car is: "+ localStorage["latitude"]);
    console.log("Latitude of car is: "+ localStorage["longitude"]);
    var Carlatlng = new google.maps.LatLng(localStorage["latitude"],localStorage["longitude"]);  //for live demo
    console.log("adding current location marker");
    var iconBase = 'https://maps.google.com/mapfiles/kml/shapes/';
    var pinIcon = new google.maps.MarkerImage(
      "http://maps.google.com/mapfiles/kml/pal4/icon62.png",
      null, /* size is determined at runtime */
      null, /* origin is 0,0 */
      new google.maps.Point(20,20), /* anchor is center of the scaled image */
      new google.maps.Size(40, 40)
    );
  
    var marker = new google.maps.Marker({
      position: Carlatlng,
      map: map,
      title: 'Current Location',
      icon: pinIcon
    });
    console.log("finished adding current location marker");

    map.panTo( latlng); //center map on vancouver 
    directionsDisplay.setMap(map);
    directionsDisplay.setOptions( { suppressMarkers: true } ); //Removing markers when routing

    directionsDisplay.setPanel(document.getElementById('directions-panel'));

    var control = document.getElementById('control');
    control.style.display = 'block';
    map.controls[google.maps.ControlPosition.TOP_CENTER].push(control);
    moveMarker(map, marker);
  }

  function moveMarker ( map, marker){    
  //delayed so you can see it move
      setInterval( function(){
      getVehicleData();
      correctFuelLevel(); 
   //   printVehicle_data(); //testing all returned outputs
      //testLat += 0.0001;
      //testLong += 0.0001;
      //center = new google.maps.LatLng(testLat, testLong); //only to test marker movement
      center = new google.maps.LatLng(localStorage["latitude"], localStorage["longitude"]);
      marker.setPosition( center );
      //map.panTo( center );
      console.log("car marker position updated at lat:"+localStorage["latitude"] +" long: "+localStorage["longitude"]); 
      
      }, 2000 );  //update every 2 sec
  };

  function correctFuelLevel(){
      
      if (localStorage["fuellevel"] == 0){
          localStorage["correctFuelLevel"] = localStorage["correctFuelLevel"]; //need to put in last known value non zero value of fuel level 
      }
      else //non zero fuel level
        localStorage["correctFuelLevel"] = localStorage["fuellevel"]; //update to corrected fuel level
      //console.log("Last FuelLevel is: "+ localStorage["correctFuelLevel"]);
      
      var bar = document.getElementById("progress-bar");
      var fuel = document.getElementById("fuel-panel");
      console.log(bar);
      if (localStorage["correctFuelLevel"] >= 50) {
        bar.className = "progress-bar progress-bar-success progress-bar-striped";
        fuel.className = "panel panel-success";
      }
      else if (localStorage["correctFuelLevel"] < 50 && localStorage["correctFuelLevel"] > 15) {
        bar.className = "progress-bar progress-bar-warning progress-bar-striped";
        fuel.className = "panel panel-warning";
      }
      else if (localStorage["correctFuelLevel"] <= 15) {
        bar.className = "progress-bar progress-bar-danger progress-bar-striped";
        fuel.className = "panel panel-danger";
      }

      $("#progress-bar")
        .css("width", localStorage["correctFuelLevel"] + "%")
        .attr("aria-valuenow", localStorage["correctFuelLevel"])
        .text(localStorage["correctFuelLevel"] + "%");

      $("#fuelDisplay").empty();
      $("<span>"+ localStorage["correctFuelLevel"]+"%"+"</span>").appendTo( "#fuelDisplay" );

      if (localStorage["correctFuelLevel"] <= 15){
        if (lowFuelWarningdisplayed == false)
          $('#basicModal').modal('show');    //the pop up window for low fuel
          //alert("Fuel level is low!!");

          // end of pop up window 
          lowFuelWarningdisplayed = true; 
      }
  }

  function directToGasStation(stationAddress, Brand, Product, Price) {
      //setAllMap(null);
      var lat = parseFloat(localStorage["latitude"]);
      var lng = parseFloat(localStorage["longitude"]);
      var latlng = new google.maps.LatLng(lat, lng);
      
    
      var contentString = '<div id="content">'+
      '<div id="siteNotice">'+
      '</div>'+
      '<div id="bodyContent">'+
      '<p><b>Brand: '+ Brand +
      '<p><b>Product: '+ Product +
      '<p><b>Price: '+ Price +
      '</div>'+
      '</div>';
      console.log(contentString);
    
 
    //Calculating distance 
      geocoder.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          if (results[1]) {
           // console.log(results[1].formatted_address);
            address=results[1].formatted_address;       //Get the address in string of current location of the car
            console.log(address);

            var request = {                             //Get the direction from the current location to gas station 
              origin:results[1].formatted_address,
              destination:stationAddress,
              travelMode: google.maps.TravelMode.DRIVING
            };

            directionsService.route(request, function(response, status) {
              if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(response);
              }
            });
          }
        } else {
            alert("Geocoder failed due to: " + status);
          }
      });



      var pinIcon = new google.maps.MarkerImage(
        "http://maps.google.com/mapfiles/kml/shapes/gas_stations.png",
        null, /* size is determined at runtime */
        null, /* origin is 0,0 */
        new google.maps.Point(20,20), /* anchor is bottom center of the scaled image */
        new google.maps.Size(40, 40)
      );

      geocoder.geocode( { 'address': stationAddress}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
        //map.setCenter(results[0].geometry.location);

        console.log("address station");
        if (stationMarker == null){
          stationMarker= new google.maps.Marker({
            map: map, 
            position: results[0].geometry.location,
            title: 'Gas Station',
            icon : pinIcon
          });
        } else {
          stationMarker.setPosition(results[0].geometry.location);
        }


      if (infowindow==null) {
        infowindow = new google.maps.InfoWindow({
          content: contentString
        });
        console.log("infowindow is null");
        infowindow.open(map,stationMarker);
      }
      else{
        infowindow.close();
        infowindow = new google.maps.InfoWindow({
          content: contentString
        });
        console.log("infowindow not null");
        infowindow.open(map,stationMarker);
      }
      
      //var prevInfoWindow = false;
      var prevInfoWindow = true; 

      //When click the icon
      google.maps.event.addListener(stationMarker, 'click',  function() {
      if(prevInfoWindow) {
        infowindow.close();
        prevInfoWindow = false;
      }
      else{
        //infowindow.open(map,stationMarker);
        prevInfoWindow = infowindow;
        infowindow.open(map,stationMarker);
        console.log("window is opened");
      }
      });

      } else {
        alert("Geocode was not successful for the following reason: " + status);
      }
    });


  }

  function getVehicleData(){   //move this function to map page later  
    return mojio_client.get(mojio_client.model("Vehicle"), {}, function(error, result) {
        var i, lat, lng, fuellevel;
        lat = [];  //can pass these values directly to Google maps
        lng = [];
        i =0;
        fuellevel = 0;
        $.each(result.Data, function(key, value) {
            if ((value.LastLocation != null) && (value.LastLocation.Lat != null) && (value.LastLocation.Lng != null)) {
                lat[i]= value.LastLocation.Lat;
                lng[i]= value.LastLocation.Lng;
                fuellevel = value.FuelLevel;
                //lastodometer = value.LastOdometer;
                //console.log("odometer is: "+ lastodometer);

                localStorage["latitude"] = value.LastLocation.Lat; //store long and lat into local storage
                localStorage["longitude"] = value.LastLocation.Lng;
                localStorage["fuellevel"] = value.FuelLevel;  //displays 0 when mojio device isnt connected to network
                return i++;

            }

        });
        

        console.log("location of vehicle is: LAT:"+ localStorage["latitude"]+" " + "LONG:" +localStorage["longitude"]);
        //console.log("Fuel level of car: "+ localStorage["fuellevel"]);
    });
  }

  function printVehicle_data() {
    var Vehicle = mojio_client.model("Vehicle"); // Gets a trip model schema.
    mojio_client.get(Vehicle, {}, function(error, result) {
        var str = "";
        if (error) {
            console.log(error); // Some error occured.
        } else {
            var vehicle = mojio_client.getResults(Vehicle, result);  // Helper function to get the results.
            console.log(vehicle);
        }
    });

  }

  google.maps.event.addDomListener(window, "load", initialize);
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="regular"]', function(event) {
        sessionStorage["gasGrade"] = "Unleaded";
        console.log("clicked");
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="midGrade"]', function(event) {
      sessionStorage["gasGrade"] = "Midgrade";
      console.log("clicked");
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="premium"]', function(event) {
      sessionStorage["gasGrade"] = "Premium";
      console.log("clicked");
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="diesel"]', function(event) {
      sessionStorage["gasGrade"] = "Diesel";
      console.log("clicked");
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="range_1"]', function(event) {
        sessionStorage["range"] = "1";
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="range_2"]', function(event) {
        sessionStorage["range"] = "2";
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="range_5"]', function(event) {
        sessionStorage["range"] = "5";
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="range_0"]', function(event) {
        sessionStorage["range"] = "10";
    });
  });
 

  function getCheapest(){
    $.get("map/getCheapest", {longitude_input: localStorage["longitude"], latitude_input: localStorage["latitude"], product_input: sessionStorage["gasGrade"], distance_input: sessionStorage["range"]})
    .done(function( data ) {
      var message = '<div class="alert alert-warning alert-dismissible" role="alert"> <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button> <strong>Warning!</strong> No station found in the given search range. Please select a bigger search range. </div>';
      
      $("#ResultField").empty();
      
      $("<p><b> Brand: </b>"+data.brand_out+"</p>").appendTo( "#ResultField" );
      $("<p><b> Address: </b>"+data.address_out+"</p>").appendTo( "#ResultField" );
      $("<p><b> Distance: </b>"+data.distance_out+" km</p>").appendTo( "#ResultField" );
      $("<p><b> Gas Type: </b>"+data.product_out+"</p>").appendTo( "#ResultField" );
      $("<p><b> Price: </b>"+data.price_out+"</p>").appendTo( "#ResultField" );

      if(data.address_out == "No Result Found")
        $('#ResultField').append(message);

      directToGasStation(data.address_out+",Canada", data.brand_out, data.product_out, data.price_out);
    }); 
  }
  
  function getClosest(){
    $('#basicModal').modal('hide');
    $.get("map/getClosest", {longitude_input: localStorage["longitude"], latitude_input: localStorage["latitude"], product_input: sessionStorage["gasGrade"]})
    .done(function( data ) {
      var message = '<div class="alert alert-warning alert-dismissible" role="alert"> <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button> <strong>Warning!</strong> No station found in the given search range. Please select a bigger search range. </div>';

      $("#ResultField").empty();
      
      $("<p><b> Brand: </b>"+data.brand_out+"</p>").appendTo( "#ResultField" );
      $("<p><b> Address: </b>"+data.address_out+"</p>").appendTo( "#ResultField" );
      $("<p><b> Distance: </b>"+data.distance_out+" km</p>").appendTo( "#ResultField" );
      $("<p><b> Gas Type: </b>"+data.product_out+"</p>").appendTo( "#ResultField" );
      $("<p><b> Price: </b>"+data.price_out+"</p>").appendTo( "#ResultField" );
      
      if(data.address_out == "No Result Found")
        $('#ResultField').append(message);
      
      directToGasStation(data.address_out+",Canada", data.brand_out, data.product_out, data.price_out);
    });
  }   



  function getClosestForWarning(){
    //if($('#regular').val() == '' && $('#midGrade').val() == '' && $('#premium').val() == '' && $('#diesel').val() == ''){
    if(sessionStorage.length == 0){
      console.log("no grades checked");
    }else{
      getClosest();
      console.log("grade checked");   
      }
  }  




.container-fluid   
  

  #basicModal.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "basicModal", :role => "dialog", :tabindex => "-1"}
    .modal.fade
    .modal-dialog
      .modal-content
        .modal-header{:style =>"background-color: #636060"}
          %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
            %span{"aria-hidden" => "true"} ×
          %h3#myModalLabel.modal-title{:style => "color:white"} Warning! Gas Level Below 15%.
        .modal-body{:style =>"background-color: #636060"}
          %span.centered
            .btn-inline{"data-toggle" => "buttons"}
            %label#regular.btn.btn-primary{:style => "margin-top:5px"}
              %input#regular{:autocomplete => "off",  :name => "options", :type => "radio"}/
              Regular
            %label#midGrade.btn.btn-primary{:style => "margin-top:5px"}
              %input#midGrade{:autocomplete => "off", :name => "options", :type => "radio"}/
              Mid-Grade
            %label#premium.btn.btn-primary{:style => "margin-top:5px"}
              %input#premium{:autocomplete => "off", :name => "options", :type => "radio"}/
              Premium
            %label#diesel.btn.btn-primary{:style => "margin-top:5px"}
              %input#diesel{:autocomplete => "off", :name => "options", :type => "radio"}/
              Diesel
        .modal-footer{:style =>"background-color: #636060"}
          %h4{:style => "color:white"} Find Closest Gas Station
          %input.btn.btn-default{:type => "button", :value => "Search", :onClick => "getClosestForWarning()"}
          %button.btn.btn-default{"data-dismiss" => "modal", :type => "button"} Later




  #loginError.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "basicModal", :role => "dialog", :tabindex => "-1"}
    .modal.fade
    .modal-dialog
      .modal-content
        .modal-header
          %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
          //%h4.modal-title Modal Warning !
          %h3#myModalLabel.modal-title{:style => "color:red"} Warning!
        .modal-body{:style =>"background-color:red"}
          %h4{:style => "color:white"} Please login before accessing this page.
        .modal-footer
          %a.btn.btn-default{:href => "/", :type => "button"} OK
  
  #map


  .panel.panel-info{:id => "fuel-panel"}
    .panel-heading
      %h3.panel-title
        %b Fuel Level
    .panel-body
      .progress
        .progress-bar.progress-bar-warning{"aria-valuemax" => "100", "aria-valuemin" => "0", "aria-valuenow"=> "100" , :id => "progress-bar", :role => "progressbar", :style => "width: 100%"}
          100%
      %p
        %span{:style => "color:grey"} *The warning sign will pop up when the fuel level is lower than 15%
  
  .panel.panel-info
    .panel-heading
      %h3.panel-title 
        %b Results
    .panel-body
      #ResultField
      
  .panel.panel-info
    .panel-heading
      %h3.panel-title 
        %b Direction
    .panel-body
      #directions-panel
  #control

  
  #accordion.panel-group{"aria-multiselectable" => "true", :role => "tablist"}
  .panel.panel-info.col-md-3
    #headingOne.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapseOne", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapseOne"}
          %b Find Closest Station
    #collapseOne.panel-collapse.collapse{"aria-labelledby" => "headingOne", :role => "tabpanel"}
      .panel-body
        %h4 Preference:
        %h5 Fuel Type:
        .btn-inline{"data-toggle" => "buttons"}
          %label#regular.btn.btn-primary{:style => "margin-top:5px"}
            %input#regular{:autocomplete => "off", :checked => "checked", :name => "options", :type => "radio"}/
            Regular
          %label#midGrade.btn.btn-primary{:style => "margin-top:5px"}
            %input#midGrade{:autocomplete => "off", :name => "options", :type => "radio"}/
            Mid-Grade
          %label#premium.btn.btn-primary{:style => "margin-top:5px"}
            %input#premium{:autocomplete => "off", :name => "options", :type => "radio"}/
            Premium
          %label#diesel.btn.btn-primary{:style => "margin-top:5px"}
            %input#diesel{:autocomplete => "off", :name => "options", :type => "radio"}/
            Diesel
        %input.pull-right.btn.btn-default{:type => "button", :value => "Search", :onClick => "getClosest()"}
              
  .panel.panel-info.col-md-3.col-md-offset-1
    #headingTwo.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapseTwo", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapseTwo"}
          %b Find Cheapest Station
    #collapseTwo.panel-collapse.collapse{"aria-labelledby" => "headingTwo", :role => "tabpanel"}
      .panel-body
        %h4 Preference:
        %h5 Fuel Type:
        .btn-inline{"data-toggle" => "buttons"}
          %label#regular.btn.btn-primary{:style => "margin-top:5px"}
            %input#regular{:autocomplete => "off", :checked => "checked", :name => "options", :type => "radio"}/
            Regular
          %label#midGrade.btn.btn-primary{:style => "margin-top:5px"}
            %input#midGrade{:autocomplete => "off", :name => "options", :type => "radio"}/
            Mid-Grade
          %label#premium.btn.btn-primary{:style => "margin-top:5px"}
            %input#premium{:autocomplete => "off", :name => "options", :type => "radio"}/
            Premium
          %label#diesel.btn.btn-primary{:style => "margin-top:5px"}
            %input#diesel{:autocomplete => "off", :name => "options", :type => "radio"}/
            Diesel
        %h5 Search Range (km):
        .btn{"data-toggle" => "buttons"}
          %label#range_1.btn.btn-primary
            %input#range_1{:autocomplete => "off", :checked => "checked", :name => "options", :type => "radio"}/
            1
          %label#range_2.btn.btn-primary
            %input#range_2{:autocomplete => "off", :name => "options", :type => "radio"}/
            2
          %label#range_5.btn.btn-primary
            %input#range_5{:autocomplete => "off", :name => "options", :type => "radio"}/
            5
          %label#range_0.btn.btn-primary
            %input#range_0{:autocomplete => "off", :name => "options", :type => "radio"}/
            10 
        %input.pull-right.btn.btn-default{:type => "button", :value => "Search", :onClick => "getCheapest()"}


  
