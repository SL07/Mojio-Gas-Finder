:javascript
  var App, MojioClient, config, mojio_client, Current_marker; //some variables needed to initialize data 
  var isLoggedIn = false;
  Current_marker = null;
  var count;
  var testLat = 49.25; 
  var testLong = -123.1;

  localStorage["correctFuelLevel"] = 65;  //random number to initialize, will be over written 

  var gasStationAddress= "7282 Knight St, Vancouver";
  var geocoder;
  var map;
  var directionsDisplay;
  var directionsService = new google.maps.DirectionsService();

  config = {
            application: '434f01ce-504b-4f72-a919-5a81dee7d506', // Fill in your app id here!
            redirect_uri: 'https://mojio.herokuapp.com/map', // Fill in you redirect uri here! (Ex. 'http://localhost:4093/index.html')
            hostname: 'api.moj.io',
            version: 'v1',
            port: '443',
            scheme: 'https',
            live: false // This will connect your app to the sandbox environment, change it to true to go live. 
        };
        mojio_client = new MojioClient(config);
    /*   
    if (localStorage["mojio_token"] == null){
       console.log("localStorge not made yet, need to login");   
    }
    else{
    //clear previous token then set new one
    //localStorage.removeItem("lastname"); syntax to clear localStorage
    console.log("value of token is: " + localStorage["mojio_token"]);
    mojio_client.auth_token = JSON.parse(localStorage["mojio_token"]); //need to destring before passing in
    } 
    */
  if (mojio_client.isLoggedIn() == false){  //use this to test for login status
      console.log("checking for login token");
              mojio_client.token(function(error, result) {
                  if (error) {
                      console.log(error);
                     // alert("Authorize Redirect, token could not be retreived:" + error); //take out later 
                  } else {
                    //  alert("Authorization Successful.");   //taken out for video demo
                      div = $("#welcome");
                      div.html('Authorization Result:');
                      div.append(JSON.stringify(result));
                      console.log(JSON.stringify(result));
                      localStorage.removeItem["mojio_token"]; //clears the token before appending a new one
                      localStorage["mojio_token"] = JSON.stringify(result);  //save the token into local storage
                      getVehicleData(); //update all long, lat and fuel level data on first load
                  }
              });
              console.log("value of token is: " + localStorage["mojio_token"]);
              mojio_client.auth_token = JSON.parse(localStorage["mojio_token"]); //need to destring before passing in

  }
  else if(mojio_client.isLoggedIn() == true){
    console.log("already logged in to Mojio");
    console.log("value of token is: " + localStorage["mojio_token"]);

  }
  

  function initialize() {
    geocoder = new google.maps.Geocoder();
    directionsDisplay = new google.maps.DirectionsRenderer();
    var latlng = new google.maps.LatLng(49.25, -123.100);
      var mapOptions = {
        zoom: 14,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
    map = new google.maps.Map(document.getElementById("map"), mapOptions);
    console.log("Latitude of car is: "+ localStorage["latitude"]);
    console.log("Latitude of car is: "+ localStorage["longitude"]);
    var Carlatlng = new google.maps.LatLng(localStorage["latitude"],localStorage["longitude"]);  //for live demo
    console.log("adding current location marker");
    var marker = new google.maps.Marker({
      position: Carlatlng,
      map: map,
      title: 'Current Location'
    });
    console.log("finished adding current location marker");
    //map.panTo( center); //center map on vancouver 
    //map.panTo(center);
    directionsDisplay.setMap(map);

    directionsDisplay.setPanel(document.getElementById('directions-panel'));

    var control = document.getElementById('control');
    control.style.display = 'block';
    map.controls[google.maps.ControlPosition.TOP_CENTER].push(control);

    moveMarker(map, marker);
  }

  function moveMarker ( map, marker){    
  //delayed so you can see it move
      setInterval( function(){
      getVehicleData();
      correctFuelLevel(); 
      printVehicle_data();
   //   printVehicle_data(); //testing all returned outputs
      //testLat += 0.0001;
      //testLong += 0.0001;
      //center = new google.maps.LatLng(testLat, testLong); //only to test marker movement
      center = new google.maps.LatLng(localStorage["latitude"], localStorage["longitude"]);
      marker.setPosition( center );
      //map.panTo( center );
      console.log("car marker position updated"); 
      
      }, 2000 );  //update every 1.5 sec
  };

  function correctFuelLevel(){
      
      if (localStorage["fuellevel"] == 0){
          localStorage["correctFuelLevel"] = localStorage["correctFuelLevel"]; //need to put in last known value non zero value of fuel level 
      }
      else //non zero fuel level
        localStorage["correctFuelLevel"] = localStorage["fuellevel"]; //update to corrected fuel level
      console.log("Last FuelLevel is: "+ localStorage["correctFuelLevel"]);
      

      $("#fuelDisplay").empty();
      $("<p>"+ localStorage["correctFuelLevel"]+"</p>").appendTo( "#fuelDisplay" );

      if (localStorage["correctFuelLevel"] <= 15){
        if (lowFuelWarningdisplayed == false)
          $('#basicModal').modal('show');    //the pop up window for low fuel

          // end of pop up window 
          lowFuelWarningdisplayed = true; 
      }
  }

  
  function directToGasStation(stationAddress) {
      //localStorage["latitude"]=49.277892;
      //localStorage["longitude"]=-123.126777;

      var lat = parseFloat(localStorage["latitude"]);
      var lng = parseFloat(localStorage["longitude"]);
      var latlng = new google.maps.LatLng(lat, lng);
      geocoder.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          if (results[1]) {
           // console.log(results[1].formatted_address);
            address=results[1].formatted_address;       //Get the address in string of current location of the car
            console.log(address);

            var request = {                             //Get the direction from the current location to gas station 
            origin:results[1].formatted_address,
            destination:stationAddress,
            travelMode: google.maps.TravelMode.DRIVING
            };
             /* directionsService.route(request, function(result, status) {
              if (status == google.maps.DirectionsStatus.OK) {
              directionsDisplay.setDirections(result);
              }
            });*/

              directionsService.route(request, function(response, status) {
              if (status == google.maps.DirectionsStatus.OK) {
              directionsDisplay.setDirections(response);
              }
            });
          }
        } else {
          alert("Geocoder failed due to: " + status);
          }
        });
  
    }


  function getVehicleData(){   //move this function to map page later  
    return mojio_client.get(mojio_client.model("Vehicle"), {}, function(error, result) {
        var i, lat, lng, fuellevel;
        lat = [];  //can pass these values directly to Google maps
        lng = [];
        i =0;
        fuellevel = 0;
        $.each(result.Data, function(key, value) {
            if ((value.LastLocation != null) && (value.LastLocation.Lat != null) && (value.LastLocation.Lng != null)) {
                lat[i]= value.LastLocation.Lat;
                lng[i]= value.LastLocation.Lng;
                fuellevel = value.FuelLevel;
                //lastodometer = value.LastOdometer;
                //console.log("odometer is: "+ lastodometer);

                localStorage["latitude"] = value.LastLocation.Lat; //store long and lat into local storage
                localStorage["longitude"] = value.LastLocation.Lng;
                localStorage["fuellevel"] = value.FuelLevel;  //displays 0 when mojio device isnt connected to network
                return i++;

            }

        });
        

        console.log("location of vehicle is: LAT:"+ localStorage["latitude"]+" " + "LONG:" +localStorage["longitude"]);
        console.log("Fuel level of car: "+ localStorage["fuellevel"]);
    });
  }

  function printVehicle_data() {
    var Vehicle = mojio_client.model("Vehicle"); // Gets a trip model schema.
    mojio_client.get(Vehicle, {}, function(error, result) {
        var str = "";
        if (error) {
            console.log(error); // Some error occured.
        } else {
            var vehicle = mojio_client.getResults(Vehicle, result);  // Helper function to get the results.
            console.log(vehicle);
        }
    });

  }

  function mojioLogout (){

    localStorage.removeItem("mojio_token");
    localStorage.removeItem("longitude");
    localStorage.removeItem("latitude");
    isLoggedIn = false;
    //mojio_client.unauthorize(config.redirect_uri);
    if (mojio_client.isLoggedIn() == false)
    console.log("Logged out of Mojio API");
    else console.log("still logged in to Mojio");
        console.log("localStoreage token is:" +  localStorage["mojio_token"]);
  } 


  function timeoutTest () {
    console.log("GOT INTO timeoutTest");
    setTimeout(timeoutTest, 1500); //rerun every 1.5 seconds
  }

 
  //var myVar = setInterval(function () {myTimer()}, 3000); //enable this to call repeating function(ie: AutoUpdate() function)  

  function myTimer() {
    //var d = new Date();
    //document.getElementById("demo").innerHTML = d.toLocaleTimeString();
    console.log("inside timer function");
    autoUpdate();
  }

  google.maps.event.addDomListener(window, "load", initialize);
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="regular"]', function(event) {
        sessionStorage["gasGrade"] = "Unleaded";
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="midGrade"]', function(event) {
    	sessionStorage["gasGrade"] = "Midgrade";
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="premium"]', function(event) {
    	sessionStorage["gasGrade"] = "Premium";
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="diesel"]', function(event) {
    	sessionStorage["gasGrade"] = "Diesel";
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="range_1"]', function(event) {
        sessionStorage["range"] = "1";
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="range_2"]', function(event) {
        sessionStorage["range"] = "2";
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="range_5"]', function(event) {
        sessionStorage["range"] = "5";
    });
  });
  
  jQuery(function ($) {
    $(document).on('click', 'label[id^="range_0"]', function(event) {
        sessionStorage["range"] = "10";
    });
  });
  
  function getCheapest(){
    $.get("map/getCheapest", {longitude_input: localStorage["longitude"], latitude_input: localStorage["latitude"], product_input: sessionStorage["gasGrade"], distance_input: sessionStorage["range"]})
    .done(function( data ) {
      var message = '<div class="alert alert-warning alert-dismissible" role="alert"> <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button> <strong>Warning!</strong> No station found in the given search range. Please select a bigger search range. </div>';
      
      sessionStorage["stationAddress"] = data.address_out+",Canada";
      console.log ( sessionStorage["stationAddress"]);
      $("#ResultField").empty();
      
      if(data.address_out == "No Result Found")
      	$('#ResultField').append(message);
      
      $("<p> Search Result: </p>").appendTo( "#ResultField" );
      $("<p> Brand: "+data.brand_out+"</p>").appendTo( "#ResultField" );
      $("<p> Address: "+data.address_out+"</p>").appendTo( "#ResultField" );
      $("<p> Distance: "+data.distance_out+"</p>").appendTo( "#ResultField" );
      $("<p> Gas Type: "+data.product_out+"</p>").appendTo( "#ResultField" );
      $("<p> Price: "+data.price_out+"</p>").appendTo( "#ResultField" );
    }); 
    directToGasStation(sessionStorage["stationAddress"]);
  }
  
  function getClosest(){
    $.get("map/getClosest", {longitude_input: localStorage["longitude"], latitude_input: localStorage["latitude"], product_input: sessionStorage["gasGrade"]})
    .done(function( data ) {
      var message = '<div class="alert alert-warning alert-dismissible" role="alert"> <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button> <strong>Warning!</strong> No station found in the given search range. Please select a bigger search range. </div>';
    
      sessionStorage["stationAddress"] = data.address_out+",Canada";
      console.log ( sessionStorage["stationAddress"]);
      $("#ResultField").empty();
      
      if(data.address_out == "No Result Found")
      	$('#ResultField').append(message);
      
      
      $("<p> Search Result: </p>").appendTo( "#ResultField" );
      $("<p> Brand: "+data.brand_out+"</p>").appendTo( "#ResultField" );
      $("<p> Address: "+data.address_out+"</p>").appendTo( "#ResultField" );
      $("<p> Distance: "+data.distance_out+"</p>").appendTo( "#ResultField" );
      $("<p> Gas Type: "+data.product_out+"</p>").appendTo( "#ResultField" );
      $("<p> Price: "+data.price_out+"</p>").appendTo( "#ResultField" );
    }); 
    directToGasStation(sessionStorage["stationAddress"]);
  }
  
  
.container-fluid
  #basicModal.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "basicModal", :role => "dialog", :tabindex => "-1"}
  .modal-dialog
    .modal-content
      .modal-header
        %h3#myModalLabel.modal-title{:style => "color:white"} Low Gas Level Warning!
      .modal-body
        %h4{:style => "color:white"} Gas Level Below 15%.
      .modal-footer
        %button.btn.btn-default{"data-dismiss" => "modal", :type => "button"} Close
        
  %h1 Map
  #map
  %p
    Fuel level:
    #fuelDisplay
  %p
    #ResultField
  %P
  #directions-panel
  #control

  
  #accordion.panel-group{"aria-multiselectable" => "true", :role => "tablist"}
  .panel.panel-default.col-md-3
    #headingOne.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapseOne", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapseOne"}
          Find Closest Station
    #collapseOne.panel-collapse.collapse{"aria-labelledby" => "headingOne", :role => "tabpanel"}
      .panel-body
        %h4 Preference:
        %h5 Fuel Type:
        .btn-inline{"data-toggle" => "buttons"}
          %label#regular.btn.btn-primary.active
            %input#regular{:autocomplete => "off", :checked => "checked", :name => "options", :type => "radio"}/
            Regular
          %label#midGrade.btn.btn-primary
            %input#midGrade{:autocomplete => "off", :name => "options", :type => "radio"}/
            Mid-Grade
          %label#premium.btn.btn-primary
            %input#premium{:autocomplete => "off", :name => "options", :type => "radio"}/
            Premium
          %label#diesel.btn.btn-primary
            %input#diesel{:autocomplete => "off", :name => "options", :type => "radio"}/
            Diesel
        %input.pull-right.btn.btn-default{:type => "button", :value => "Search", :onClick => "getClosest()"}
              
  .panel.panel-default.col-md-3.col-md-offset-1
    #headingTwo.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapseTwo", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapseTwo"}
          Find Cheapest Station
    #collapseTwo.panel-collapse.collapse{"aria-labelledby" => "headingTwo", :role => "tabpanel"}
      .panel-body
        %h4 Preference:
        %h5 Fuel Type:
        .btn-inline{"data-toggle" => "buttons"}
          %label#regular.btn.btn-primary.active
            %input#regular{:autocomplete => "off", :checked => "checked", :name => "options", :type => "radio"}/
            Regular
          %label#midGrade.btn.btn-primary
            %input#midGrade{:autocomplete => "off", :name => "options", :type => "radio"}/
            Mid-Grade
          %label#premium.btn.btn-primary
            %input#premium{:autocomplete => "off", :name => "options", :type => "radio"}/
            Premium
          %label#diesel.btn.btn-primary
            %input#diesel{:autocomplete => "off", :name => "options", :type => "radio"}/
            Diesel
        %h5 Search Range (km):
        .btn{"data-toggle" => "buttons"}
          %label#range_1.btn.btn-primary.active
            %input#range_1{:autocomplete => "off", :checked => "checked", :name => "options", :type => "radio"}/
            1
          %label#range_2.btn.btn-primary
            %input#range_2{:autocomplete => "off", :name => "options", :type => "radio"}/
            2
          %label#range_5.btn.btn-primary
            %input#range_5{:autocomplete => "off", :name => "options", :type => "radio"}/
            5
          %label#range_0.btn.btn-primary
            %input#range_0{:autocomplete => "off", :name => "options", :type => "radio"}/
            10 
        %input.pull-right.btn.btn-default{:type => "button", :value => "Search", :onClick => "getCheapest()"}


  
